apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: naglfar-tpch10-benching-
spec:
  entrypoint: starter
  onExit: delete-ns
  arguments:
    parameters:
      - name: queries
        value: "q1,q2,q3,q4,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19,q20,q21,q22"
      ######################################### current part
      - name: use-explain                       # show explain analyze info?
        value: false
      - name: release                           # release version: nightly, v3.0.x, v4.0.x
        value: nightly
      - name: tidb-url
        value: "http://fileserver.pingcap.net/download/builds/pingcap/tidb/pr/8995989e96c1123c9d8f7e6358feff1bcd5de56f/centos7/tidb-server.tar.gz"
      - name: tikv-url
        value: ""
      - name: pd-url
        value: ""
      - name: toolset-tag                       # we use br to restore data, so you need fill in the toolset version
        value: nightly                          # option: nightly | v5.0-rc-nightly | release-4.0-nightly
      ######################################### baseline part
      - name: baseline-release
        value: nightly
      - name: baseline-tidb-url                 # if need to patch baseline tidb binary version
        value: "http://fileserver.pingcap.net/download/builds/pingcap/tidb/7c552f52fabeff0c4aad33e69a8193cd94ecd9c5/centos7/tidb-server.tar.gz"
      - name: baseline-tikv-url
        value: ""
      - name: baseline-pd-url
        value: ""
      - name: baseline-toolset-tag             # we use br to restore data, so you need fill in the toolset version
        value: nightly                         # option: nightly | v5.0-rc-nightly | release-4.0-nightly
  templates:
    - name: starter
      steps:
        - - name: create-ns
            template: create-ns
        - - name: request-cluster
            template: request-cluster
        - - name: create-cluster
            template: create-cluster
            arguments:
              parameters: [ { name: release-branch, value: "{{workflow.parameters.release}}" },
                            { name: tidb-url, value: "{{workflow.parameters.tidb-url}}" },
                            { name: tikv-url, value: "{{workflow.parameters.tikv-url}}" },
                            { name: pd-url, value: "{{workflow.parameters.pd-url}}" } ]
        - - name: importer-logs-1
            template: importer-logs
            arguments:
              parameters: [ { name: toolset-tag,   value: "{{workflow.parameters.toolset-tag}}" },
                            { name: release-branch, value: "{{workflow.parameters.release}}" } ]
        - - name: benching-logs-1
            template: benching-logs
        - - name: uninstall-cluster
            template: uninstall-cluster
        - - name: create-cluster-baseline
            template: create-cluster
            arguments:
              parameters: [ { name: release-branch, value: "{{workflow.parameters.baseline-release}}" },
                            { name: tidb-url, value: "{{workflow.parameters.baseline-tidb-url}}" },
                            { name: tikv-url, value: "{{workflow.parameters.baseline-tikv-url}}" },
                            { name: pd-url, value: "{{workflow.parameters.baseline-pd-url}}" } ]
        - - name: importer-logs-2
            template: importer-logs
            arguments:
              parameters: [ { name: toolset-tag,   value: "{{workflow.parameters.baseline-toolset-tag}}" },
                            { name: release-branch, value: "{{workflow.parameters.baseline-release}}" } ]
        - - name: benching-logs-2
            template: benching-logs
    - name: importer-logs
      inputs:
        parameters:
          - name: toolset-tag
          - name: release-branch
      steps:
        - - name: importing
            template: importing
            arguments:
              parameters: [ { name: toolset-tag,    value: "{{inputs.parameters.toolset-tag}}" },
                            { name: release-branch, value: "{{inputs.parameters.release-branch}}" }]
          - name: importing-logs
            template: logs
            arguments:
              parameters: [ { name: workload_name, value: "tpch10-importing" } ]
        - - name: importing-deletion
            template: workload-deletion
            arguments:
              parameters: [ { name: workload_name, value: "tpch10-importing" } ]
    - name: benching-logs
      steps:
        - - name: benching
            template: benching
          - name: benching-logs
            template: logs
            arguments:
              parameters: [ { name: workload_name, value: "tpch10-benching" } ]
        - - name: importing-deletion
            template: workload-deletion
            arguments:
              parameters: [ { name: workload_name, value: "tpch10-benching" } ]
    - name: logs
      inputs:
        parameters:
          - name: workload_name
      container:
        name: logs
        image: 'argoproj/argoexec:latest'
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - '-c'
          - |
            while true
            do
                state=`kubectl get tw {{inputs.parameters.workload_name}} -n {{workflow.name}} -ojsonpath='{.status.state}' || echo pending`
                if [ "running" = "$state" ]; then
                    break
                fi
                if [ "succeeded" = "$state" ]; then
                    break
                fi
                if [ "failed" = "$state" ]; then
                    break
                fi
                echo "workload isn't already now. Wait 10s..."
                sleep 10
            done
            curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/PingCAP-QE/Naglfar/master/scripts/kubectl-naglfar-installer.sh | sh
            export PATH=$PATH:/root/.Naglfar/bin
            naglfar logs {{inputs.parameters.workload_name}} -n {{workflow.name}} --follow
    - name: request-cluster
      resource:
        action: create
        successCondition: status.state = ready
        manifest: |
          apiVersion: naglfar.pingcap.com/v1
          kind: TestResourceRequest
          metadata:
            name: tidb-cluster
            namespace: {{workflow.name}}
          spec:
            machines:
              - name: m1
                exclusive: true
            items:
              - name: tidb
                spec:
                  memory: 32GB
                  cores: 16
                  machine: m1
              - name: pd
                spec:
                  memory: 8GB
                  cores: 2
                  machine: m1
              - name: tikv-1
                spec:
                  memory: 64GB
                  cores: 16
                  disks:
                    disk1:
                      kind: nvme
                      mountPath: /disk1
                  machine: m1
              - name: workload
                spec:
                  memory: 8GB
                  cores: 4
                  machine: m1
    - name: create-cluster
      inputs:
        parameters:
          - name: release-branch
          - name: tidb-url
          - name: tikv-url
          - name: pd-url
      resource:
        action: create
        successCondition: status.state = ready
        manifest: |
          apiVersion: naglfar.pingcap.com/v1
          kind: TestClusterTopology
          metadata:
            name: tidb-cluster
            namespace: {{workflow.name}}
          spec:
            resourceRequest: tidb-cluster
            tidbCluster:
              serverConfigs:
                tidb: |-
                tikv: |-
                  rocksdb.defaultcf.block-cache-size: "16GB"
                  rocksdb.writecf.block-cache-size: "9GB"
                  rocksdb.lockcf.block-cache-size: "1GB"
                pd: |-
              version:
                version: {{inputs.parameters.release-branch}}
                tidbDownloadURL: {{inputs.parameters.tidb-url}}
                tikvDownloadURL: {{inputs.parameters.tikv-url}}
                pdDownloadURL: {{inputs.parameters.pd-url}}
              control: tidb
              tikv:
                - host: tikv-1
                  port: 20160
                  statusPort: 20180
                  deployDir: /disk1/deploy/tikv-20160
                  dataDir: /disk1/data/tikv-20160
                  logDir: /disk1/deploy/tikv-20160/log
              tidb:
                - host: tidb
                  deployDir: /disk1/deploy/tidb-4000
              pd:
                - host: pd
                  deployDir: /disk1/deploy/pd-2379
                  dataDir: /disk1/data/pd-2379
                  logDir: /disk1/deploy/pd-2379/log
              monitor:
                - host: tidb
                  deployDir: /disk1/deploy/prometheus-8249
                  dataDir: /disk1/deploy/prometheus-8249/data
              grafana:
                - host: tidb
                  deployDir: /disk1/deploy/grafana-3000
    - name: uninstall-cluster
      resource:
        action: delete
        manifest: |
          apiVersion: naglfar.pingcap.com/v1
          kind: TestClusterTopology
          metadata:
            name: tidb-cluster
            namespace: {{workflow.name}}
    - name: importing
      inputs:
        parameters:
          - name: toolset-tag
          - name: release-branch
      resource:
        action: create
        successCondition: status.state = succeeded
        failureCondition: status.state = failed
        manifest: |
          apiVersion: naglfar.pingcap.com/v1
          kind: TestWorkload
          metadata:
            name: tpch10-importing
            namespace: {{workflow.name}}
          spec:
            clusterTopologies:
              - name: tidb-cluster
                aliasName: cluster
            workloads:
              - name: tpch10-importing
                dockerContainer:
                  resourceRequest:
                    name: tidb-cluster
                    node: workload
                  image: "docker.io/pingcap/br:{{inputs.parameters.toolset-tag}}"
                  imagePullPolicy: Always
                  command:
                    - /bin/bash
                    - -c
                    - |
                      #!/bin/bash
                      set -ex
                      export AWS_ACCESS_KEY_ID=minioadmin AWS_SECRET_ACCESS_KEY=minioadmin
                      tidb=`echo $cluster_tidb0 | awk -F ":" '{print $1}'`
                      pd=`echo $cluster_pd0 | awk -F ":" '{print $1}'`
                      release_branch="{{inputs.parameters.release-branch}}"
                      mkdir /lib64 && ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2
                      if [[ ${release_branch:0:4} == "v3.0" ]]; then
                        go-tpc -H $tidb -P4000 -D tpch10 tpch --sf=10 prepare
                      elif [[ ${release_branch:0:4} == "v4.0" ]]; then
                        /br restore db --db=tpch10 --pd $pd:2379 --storage s3://benchmark/tpch10-release4.0 \
                          --s3.endpoint http://minio.pingcap.net:9000 --send-credentials-to-tikv=true
                      elif [[ ${release_branch:0:4} == "v5.0" ]]; then
                        /br restore db --db=tpch10 --pd $pd:2379 --storage s3://benchmark/tpch10 \
                          --s3.endpoint http://minio.pingcap.net:9000 --send-credentials-to-tikv=true
                      elif [[ ${release_branch} == "nightly" ]]; then
                        /br restore db --db=tpch10 --pd $pd:2379 --storage s3://benchmark/tpch10 \
                          --s3.endpoint http://minio.pingcap.net:9000 --send-credentials-to-tikv=true
                      else
                        echo "illegal release_branch: $release_branch"
                        exit 1
                      fi
    - name: benching
      resource:
        action: create
        successCondition: status.state = succeeded
        failureCondition: status.state = failed
        manifest: |
          apiVersion: naglfar.pingcap.com/v1
          kind: TestWorkload
          metadata:
            name: tpch10-benching
            namespace: {{workflow.name}}
          spec:
            clusterTopologies:
              - name: tidb-cluster
                aliasName: cluster
            workloads:
              - name: tpch10-benching
                dockerContainer:
                  resourceRequest:
                    name: tidb-cluster
                    node: workload
                  image: "hub.pingcap.net/mahjonp/bench-toolset:latest"
                  imagePullPolicy: Always
                  command:
                    - /bin/sh
                    - -c
                    - |
                      set -ex
                      tidb=`echo $cluster_tidb0 | awk -F ":" '{print $1}'`
                      # https://docs.pingcap.com/tidb/dev/v4.0-performance-benchmarking-with-tpch#variable-configuration-1
                      mysql -h $tidb -P4000 -e '
                          set global tidb_allow_batch_cop = 1;
                          set global tidb_distsql_scan_concurrency = 30;
                          set global tidb_projection_concurrency = 16;
                          set global tidb_hashagg_partial_concurrency = 16;
                          set global tidb_hashagg_final_concurrency = 16;
                          set global tidb_hash_join_concurrency = 16;
                          set global tidb_index_lookup_concurrency = 16;
                          set global tidb_index_lookup_join_concurrency = 16;
                      '
                      go-tpc -H $tidb -P4000 -D tpch10 tpch --use-explain={{workflow.parameters.use-explain}} --sf=10 --queries {{workflow.parameters.queries}} run --time 30m
    - name: workload-deletion
      inputs:
        parameters:
          - name: workload_name
      resource:
        action: delete
        manifest: |
          apiVersion: naglfar.pingcap.com/v1
          kind: TestWorkload
          metadata:
            name: {{inputs.parameters.workload_name}}
            namespace: {{workflow.name}}
    - name: create-ns
      resource:
        action: create
        successCondition: status.phase = Active
        manifest: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{workflow.name}}
    - name: delete-ns
      resource:
        action: delete
        manifest: |
          apiVersion: v1
          kind: Namespace
          metadata:
            name: {{workflow.name}}
